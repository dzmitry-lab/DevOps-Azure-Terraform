name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none
pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  backendServiceArm: 'Azure-Free-Sub Service Connection'
  backendAzureRmResourceGroupName: 'Azure-Terraform'
  backendAzureRmStorageAccountName: 'azureterraformfortests'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmKey: 'terraform.tfstate'
  environment: 'production'
  terraform_version: 'latest'

stages :
  - stage: validate
    jobs:
    - job: validate
      steps:
      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: $(terraform_version)
      - task: TerraformCLI@0
        displayName: 'init'
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          backendType: 'azurerm'
          backendServiceArm: $(backendServiceArm)
          backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
          backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
          backendAzureRmContainerName: $(backendAzureRmContainerName)
          backendAzureRmKey: $(backendAzureRmKey)
      - task: TerraformCLI@0
        displayName: 'validate'
        inputs:
          command: 'validate'
          
  - stage: plan
    dependsOn: [validate]
    condition: succeeded('validate')
    jobs:
      - job: terraform_plan_develop
        steps:
        # - task: TerraformInstaller@0
          # displayName: 'install'
          # inputs:
            # terraformVersion: $(terraform_version}}
        # - task: TerraformTaskV2@2
          # displayName: 'init'
          # inputs:
            # provider: 'azurerm'
            # command: 'init'
            # backendServiceArm: $(backendServiceArm)
            # backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
            # backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
            # backendAzureRmContainerName: $(backendAzureRmContainerName)
            # backendAzureRmKey: $(backendAzureRmKey)
            # workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        - task: TerraformCLI@0
          displayName: 'plan'
          inputs:
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
            environmentServiceName: $(backendServiceArm)
            commandOptions: '-input=false -var-file="$(System.DefaultWorkingDirectory)/terraform/vars/$(environment).tfvars"'

  # - stage: apply
    # dependsOn: [plan]
    # condition: succeeded('plan')
    # jobs:
      # - job: terraform_apply_develop
        # steps:
        # - task: TerraformInstaller@0
          # displayName: 'install'
          # inputs:
            # terraformVersion: $(terraform_version}}
        # - task: TerraformTaskV2@2
          # displayName: 'init'
          # inputs:
            # provider: 'azurerm'
            # command: 'init'
            # backendServiceArm: $(backendServiceArm)
            # backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
            # backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
            # backendAzureRmContainerName: $(backendAzureRmContainerName)
            # backendAzureRmKey: $(backendAzureRmKey) 
            # workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        # - task: TerraformTaskV2@2
          # displayName: 'plan'
          # inputs:
            # provider: 'azurerm'
            # command: 'plan'
            # commandOptions: '-input=false -var-file="../vars/$(environment).tfvars"'
            # environmentServiceNameAzureRM: $(backendServiceArm)
            # workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        # - task: TerraformTaskV2@2
          # displayName: 'apply'
          # inputs:
            # provider: 'azurerm'
            # command: 'apply'
            # commandOptions: '-input=false -auto-approve -var-file="../vars/$(environment).tfvars"'
            # environmentServiceNameAzureRM: $(backendServiceArm)
            # workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
